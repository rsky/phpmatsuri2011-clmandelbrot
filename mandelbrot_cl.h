static const char *Mandelbrot_cl = "__kernel\n"
"void Mandelbrot(\n"
"  __global unsigned char *output,\n"
"  const int w,\n"
"  const int h,\n"
"  const float cx,\n"
"  const float cy,\n"
"  const float unit)\n"
"{\n"
"  int globalID = get_global_id(0);\n"
"  int ox = globalID % w;\n"
"  int oy = globalID / w;\n"
"  int ix = ox;\n"
"  int iy = h - 1 - oy;\n"
"\n"
"  if ( ix >= w || iy >= h ) { return; }\n"
"  float fx = (float)(ix - w / 2) * unit + cx;\n"
"  float fy = (float)(iy - h / 2) * unit + cy;\n"
"\n"
"  float r = fx;\n"
"  float i = fy;\n"
"  int n;\n"
"  int m = 200;\n"
"  for (n = 0; n < m; n++) {\n"
"    float rr = r * r;\n"
"    float ii = i * i;\n"
"    float ri = r * i;\n"
"    r = fx + rr - ii;\n"
"    i = fy + 2 * ri;\n"
"    if ( rr + ii > 4 ) { break; }\n"
"  }\n"
"  float fval = (float)n / (float)m;\n"
"  int ival = 256 * fval;\n"
"  if (ival < 0) { ival = 0; }\n"
"  if (ival > 255) { ival = 255; }\n"
"\n"
"  output[ox + oy * w] = (unsigned char)ival;\n"
"}\n";
